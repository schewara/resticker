#!/bin/bash

run_commands() {
  COMMANDS=$1
  while IFS= read -r cmd; do echo "$cmd" && eval "$cmd" ; done < <(printf '%s\n' "$COMMANDS")
}

run_exit_commands() {
  set +e
  set +o pipefail
  run_commands "${POST_COMMANDS_EXIT:-}"
}

replace_spaces() {
  echo "${1/\\ /\\}"
}

replace_spaces_back() {
  echo "${1/\\/ }"
}

repo_vars_setup() {
  if [ "${MULTIREPO:-}" == "true" ]; then
    if [[ -r "${MULTIREPO_CONFIG_PATH}" ]]; then
      while read -r repo password; do
        REPOSITORIES["$repo"]="$password"
      done < "${MULTIREPO_CONFIG_PATH}"
      echo "${#REPOSITORIES[@]} repository configs loaded from ${MULTIREPO_CONFIG_PATH}"
    else
      echo "Could not read repository configs from ${MULTIREPO_CONFIG_PATH}"
      exit 1
    fi
  else
    REPOSITORIES["${RESTIC_REPOSITORY}"]="${RESTIC_PASSWORD}"
  fi
}

init_check() {
  echo "Checking configured repository '${RESTIC_REPOSITORY}' ..."
  if restic cat config > /dev/null; then
    echo "Repository found."
  else
    echo "Could not access the configured repository. Trying to initialize (in case it has not been initialized yet) ..."
    if restic init; then
      echo "Repository successfully initialized."
    else
      if [ "${SKIP_INIT_CHECK:-}" == "true" ]; then
        echo "Initialization failed. Ignoring errors because SKIP_INIT_CHECK is set in your configuration."
      else
        echo "Initialization failed. Please see error messages above and check your configuration. Exiting."
        exit 1
      fi
    fi
  fi
  echo -e "\n"
}

run() {
  local action="${1}"
  shift
  for repo in "${!REPOSITORIES[@]}"; do

    RESTIC_REPOSITORY="${repo}"
    RESTIC_PASSWORD="${REPOSITORIES[${repo}]}"

    echo "Executing ${action} on ${RESTIC_REPOSITORY} ..."
    case ${action} in
      backup | check | prune | restic)
        /usr/local/bin/"${action}" "$@"
        ;;
      init_check)
        init_check
        ;;
      *)
        echo "${action} is not defined"
    esac
  done
}

setup_cron() {
  local action=${1}
  local cron_expr=${2}
  echo "Scheduling ${action} job according to cron expression."
  exec go-cron "${cron_expr}" /usr/local/bin/repo_wrapper "${action}"
}
