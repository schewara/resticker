#!/bin/bash

run_commands() {
  COMMANDS=$1
  while IFS= read -r cmd; do echo "$cmd" && eval "$cmd" ; done < <(printf '%s\n' "$COMMANDS")
}

run_exit_commands() {
  set +e
  set +o pipefail
  run_commands "${POST_COMMANDS_EXIT:-}"
}

replace_spaces() {
  echo "${1/\\ /\\}"
}

replace_spaces_back() {
  echo "${1/\\/ }"
}

log() {
  declare level="$1"
  declare message="$2"
  declare data="${3:-}"
  declare timestamp
  timestamp=$(date -Ins)
  declare logline

  if [[ "${LOGFORMAT}" == "json" ]]; then
    logline=$(printf '{"timestamp":"%s","level":"%s","message":"%s","data": "%s"}' "${timestamp}" "${level}" "${message}" "${data:-null}")
  else
    logline=$(printf '%s [%s] %s: %s' "${timestamp}" "${level}" "${message}" "${data}")
  fi

  echo -e "${logline}"
}

repo_vars_setup() {
  if [ "${MULTIREPO:-}" == "true" ]; then
    if [[ -r "${MULTIREPO_CONFIG_PATH}" ]]; then
      while read -r repo password; do
        REPOSITORIES["$repo"]="$password"
      done < "${MULTIREPO_CONFIG_PATH}"
      log info "${#REPOSITORIES[@]} repository configs loaded from ${MULTIREPO_CONFIG_PATH}"
    else
      log error "Could not read repository configs from ${MULTIREPO_CONFIG_PATH}"
      exit 1
    fi
  else
    REPOSITORIES["${RESTIC_REPOSITORY}"]="${RESTIC_PASSWORD}"
  fi
}

# This only works properly when doing daily backups
# If there are multiple manual backups on one of these special days,
# manual cleanup needs to be performed on duplicate tags
# Returns: the list of extra Tags
extra_tags() {
  local -a tags
  if [[ "$(date +'%V' -d "tomorrow" )" != "$(date +'%V')" ]]; then tags+=("WEEKLY"); fi
  if [[ "$(date +'%m' -d "tomorrow" )" != "$(date +'%m')" ]]; then tags+=("MONTHLY"); fi
  if [[ "$(date +'%Y' -d "tomorrow" )" != "$(date +'%Y')" ]]; then tags+=("YEARLY"); fi
  echo "${tags[@]}"
}

init_check() {
  log info "Checking configured repository" "${RESTIC_REPOSITORY}"
  if restic cat config > /dev/null; then
    log info "Repository found."
  else
    log warn "Could not access the configured repository. Trying to initialize (in case it has not been initialized yet) ..."
    if restic init; then
      log info "Repository successfully initialized."
    else
      if [ "${SKIP_INIT_CHECK:-}" == "true" ]; then
        log warn "Initialization failed. Ignoring errors because SKIP_INIT_CHECK is set in your configuration."
      else
        log error "Initialization failed. Please see error messages above and check your configuration. Exiting."
        exit 1
      fi
    fi
  fi
}

run() {
  local action="${1}"
  shift
  for repo in "${!REPOSITORIES[@]}"; do

    RESTIC_REPOSITORY="${repo}"
    RESTIC_PASSWORD="${REPOSITORIES[${repo}]}"

    log info "Executing ${action} on ${RESTIC_REPOSITORY} ..."
    case ${action} in
      backup | check | prune | archive | restic)
        /usr/local/bin/"${action}" "$@"
        ;;
      init_check)
        init_check
        ;;
      *)
        log error "${action} is not defined"
    esac
  done
}

setup_cron() {
  local action=${1}
  local cron_expr=${2}
  log info "Scheduling ${action} job according to cron expression."
  exec go-cron "${cron_expr}" /usr/local/bin/repo_wrapper "${action}"
}
